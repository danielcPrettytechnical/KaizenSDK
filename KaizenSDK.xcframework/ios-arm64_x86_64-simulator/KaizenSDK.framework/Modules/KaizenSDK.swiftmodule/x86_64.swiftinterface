// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KaizenSDK
import Foundation
@_exported import KaizenSDK
import Swift
import UIKit
import WebKit
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DetailedStatsViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzDetailedStatsModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct StandingsUseCaseBuilder {
}
@_hasMissingDesignatedInitializers public class BaseUseCase {
  @objc deinit
}
extension TabPageViewController : UIKit.UIPageViewControllerDataSource {
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
}
extension TabPageViewController : UIKit.UIPageViewControllerDelegate {
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
extension TabPageViewController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
public struct StatisticsUseCaseBuilder {
}
public enum UseCaseError : Swift.Error {
  case mapping
  case network
  case underlying
  public static func == (a: KaizenSDK.UseCaseError, b: KaizenSDK.UseCaseError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers public class ScaleDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MatchViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzMatchModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct PitchComponentUseCaseBuilder {
}
public struct H2HUseCaseBuilder {
}
@_inheritsConvenienceInitializers public class WormDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
public struct DetailedStatsUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class H2HViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzH2HModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct MatchDetailUseCaseBuilder {
}
public typealias BaseEntity = Swift.Codable & KaizenSDK.PresentationTransformable
public typealias BaseEntityEnum = KaizenSDK.PresentationTransformable
public protocol PresentationTransformable {
  associatedtype PresentationModel
  func toPresentation() throws -> Self.PresentationModel
}
extension Encodable {
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
  public func jsonDictonary() throws -> [Swift.String : Any]?
}
public enum KZStateComponentViewState {
  case show
  case loading
  case noInternetConnection
  case mapping
  case underlying(context: Swift.String)
  case readyState
}
public protocol KZStateComponentDelegate : AnyObject {
  func changeViewState(_ state: KaizenSDK.KZStateComponentViewState, component: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseComponent : UIKit.UIView, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  open var xibName: Swift.String? {
    get
  }
  public var size: (height: CoreGraphics.CGFloat?, width: CoreGraphics.CGFloat?)?
  weak public var delegate: KaizenSDK.KZStateComponentDelegate?
  public var webView: WebKit.WKWebView {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func initializeView()
  @objc override dynamic public func removeFromSuperview()
  @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LineUpsViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzLineUpModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct MatchUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StatisticsCarouselComponent : KaizenSDK.BaseComponent {
  override public var xibName: Swift.String? {
    get
  }
  @objc override dynamic public func removeFromSuperview()
  override public func initializeView()
  public func configure(with kzModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension StatisticsCarouselComponent : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public struct LineUpsUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SummaryViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzSummaryModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
final public class Observable<Value> {
  final public var value: Value {
    get
    set
  }
  public init(_ value: Value)
  final public func observe(on observer: Swift.AnyObject, observerBlock: @escaping (Value) -> Swift.Void)
  final public func remove(observer: Swift.AnyObject)
  @objc deinit
}
public struct KZStyleMatchDetailModel : KaizenSDK.KZSharedProtocolModel {
  public let lang: KaizenSDK.LanguageKey
  public let identifier: Swift.String
  public let progressIndicatorColor: [UIKit.UIColor]
  public let accessToken: Swift.String?
  public let refreshToken: Swift.String?
  public init(identifier: Swift.String, lang: KaizenSDK.LanguageKey = .english, highlightFont: UIKit.UIFont? = UIFont(name: "Roboto-Bold",
                                                size: 12.0), unHighlightFont: UIKit.UIFont? = UIFont(name: "Roboto-Regular",
                                                  size: 12.0), progressIndicatorColor: [UIKit.UIColor] = kzSDKDefaultProgressIndicatorColor, accessToken: Swift.String? = nil, refreshToken: Swift.String? = nil)
}
public protocol MatchDetailRoutingLogic : AnyObject {
  func start()
  func dismiss()
  var matchDetailStyle: KaizenSDK.KZStyleMatchDetailModel { get set }
}
public struct MatchDetailViewBuilder {
  public static func inject(with navigationController: UIKit.UINavigationController?, matchDetailStyle: KaizenSDK.KZStyleMatchDetailModel) -> KaizenSDK.MatchDetailRoutingLogic
}
@_inheritsConvenienceInitializers public class ScrollingDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
public protocol CustomState {
  var lang: KaizenSDK.LanguageKey { get }
  var image: UIKit.UIImage? { get }
  var title: Swift.String? { get }
  var description: Swift.String? { get }
  var titleButton: Swift.String? { get }
}
public struct SummaryUseCaseBuilder {
}
public struct StatsUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AdvancedPageControlView : UIKit.UIView {
  public var numberOfPages: Swift.Int {
    get
    set(val)
  }
  public var drawer: KaizenSDK.AdvancedPageControlDraw
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public func setPageOffset(_ offset: CoreGraphics.CGFloat)
  public func setPage(_ index: Swift.Int)
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StatsViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzStatsModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MomentumViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzMomentumModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PitchViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzPitchModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public typealias ConstraintInsets = (left: CoreGraphics.CGFloat?, top: CoreGraphics.CGFloat?, right: CoreGraphics.CGFloat?, bottom: CoreGraphics.CGFloat?)
extension UIView {
  public func addChildView(childView: UIKit.UIView, withConstraints insets: KaizenSDK.ConstraintInsets)
}
@_inheritsConvenienceInitializers public class ThinWormHeadsDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
@_inheritsConvenienceInitializers public class JumpDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
public struct MomentumUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers open class TabPageViewController : UIKit.UIPageViewController {
  open var isInfinity: Swift.Bool
  open var tabItems: [(viewController: UIKit.UIViewController, title: Swift.String)] {
    get
    set
  }
  public static func create() -> KaizenSDK.TabPageViewController?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension TabPageViewController {
  public func displayControllerWithIndex(_ index: Swift.Int, direction: UIKit.UIPageViewController.NavigationDirection, animated: Swift.Bool)
}
extension TabPageViewController {
  public func updateNavigationBarHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  public func showNavigationBar()
}
@_inheritsConvenienceInitializers public class SlideDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
public protocol AdvancedPageControlDraw {
  var currentItem: CoreGraphics.CGFloat { get set }
  var size: CoreGraphics.CGFloat { get set }
  var numberOfPages: Swift.Int { get set }
  func draw(_ rect: CoreGraphics.CGRect)
}
public class AdvancedPageControlDrawerParentWithIndicator : KaizenSDK.AdvancedPageControlDrawerParent {
  public init(numberOfPages: Swift.Int? = 5, height: CoreGraphics.CGFloat? = 16, width: CoreGraphics.CGFloat? = 16, space: CoreGraphics.CGFloat? = 16, raduis: CoreGraphics.CGFloat? = 8, currentItem: CoreGraphics.CGFloat? = 0, indicatorColor: UIKit.UIColor? = .white, dotsColor: UIKit.UIColor? = UIColor.lightGray, isBordered: Swift.Bool = false, borderColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 1, indicatorBorderColor: UIKit.UIColor = .white, indicatorBorderWidth: CoreGraphics.CGFloat = 2)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
public class AdvancedPageControlDrawerParent {
  public var numberOfPages: Swift.Int
  public var size: CoreGraphics.CGFloat
  public var currentItem: CoreGraphics.CGFloat
  public var items: [Swift.Int]
  public init(numberOfPages: Swift.Int? = 5, height: CoreGraphics.CGFloat? = 16, width: CoreGraphics.CGFloat? = 16, space: CoreGraphics.CGFloat? = 16, raduis: CoreGraphics.CGFloat? = 16, currentItem: CoreGraphics.CGFloat? = 0, dotsColor: UIKit.UIColor? = UIColor.lightGray, isBordered: Swift.Bool = false, borderColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 1)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StandingsViewComponent : KaizenSDK.BaseComponent {
  public func configure(with kzStandingModel: KaizenSDK.KZSharedProtocolModel)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol KZSharedProtocolModel {
  var identifier: Swift.String { get }
  var lang: KaizenSDK.LanguageKey { get }
  var progressIndicatorColor: [UIKit.UIColor] { get }
  var accessToken: Swift.String? { get }
  var refreshToken: Swift.String? { get }
}
public let kzSDKDefaultProgressIndicatorColor: [UIKit.UIColor]
public struct KZViewModel : KaizenSDK.KZSharedProtocolModel {
  public let identifier: Swift.String
  public let lang: KaizenSDK.LanguageKey
  public let progressIndicatorColor: [UIKit.UIColor]
  public let accessToken: Swift.String?
  public let refreshToken: Swift.String?
  public init(identifier: Swift.String, lang: KaizenSDK.LanguageKey = .english, progressIndicatorColor: [UIKit.UIColor] = kzSDKDefaultProgressIndicatorColor, accessToken: Swift.String? = nil, refreshToken: Swift.String? = nil)
}
public enum LanguageKey : Swift.String {
  case english
  case greek
  case german
  case portuguese
  case brazilian
  case bulgarian
  case romanian
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class SwapDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ThinWormDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreGraphics.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreGraphics.CGFloat? = super, width: CoreGraphics.CGFloat? = super, space: CoreGraphics.CGFloat? = super, raduis: CoreGraphics.CGFloat? = super, currentItem: CoreGraphics.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreGraphics.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreGraphics.CGFloat = super)
  @objc deinit
}
extension KaizenSDK.UseCaseError : Swift.Equatable {}
extension KaizenSDK.UseCaseError : Swift.Hashable {}
extension KaizenSDK.LanguageKey : Swift.Equatable {}
extension KaizenSDK.LanguageKey : Swift.Hashable {}
extension KaizenSDK.LanguageKey : Swift.RawRepresentable {}
