// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KaizenSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import FloatingPanel
import Foundation
@_exported import KaizenSDK
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class DetailedStatsViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzDetailedStatsModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct StandingsUseCaseBuilder {
}
@_hasMissingDesignatedInitializers public class BaseUseCase {
  @objc deinit
}
extension KaizenSDK.TabPageViewController : UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
}
extension KaizenSDK.TabPageViewController : UIKit.UIPageViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
extension KaizenSDK.TabPageViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func warmUp()
}
public enum UseCaseError : Swift.Error {
  case mapping
  case network
  case underlying
  public static func == (a: KaizenSDK.UseCaseError, b: KaizenSDK.UseCaseError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers public class ScaleDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MatchViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzMatchModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct PitchComponentUseCaseBuilder {
}
public struct H2HUseCaseBuilder {
}
@_inheritsConvenienceInitializers public class WormDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
public struct DetailedStatsUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class H2HViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzH2HModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public typealias BaseEntity = Swift.Codable & KaizenSDK.PresentationTransformable
public typealias BaseEntityEnum = KaizenSDK.PresentationTransformable
public protocol PresentationTransformable {
  var url: Foundation.URL? { get }
  associatedtype PresentationModel
  func toPresentation() throws -> Self.PresentationModel
}
extension Swift.Encodable {
  public func jsonData() throws -> Foundation.Data
  public func jsonString(encoding: Swift.String.Encoding = .utf8) throws -> Swift.String?
  public func jsonDictonary() throws -> [Swift.String : Any]?
}
public enum KZStateComponentViewState {
  case show
  case loading
  case noInternetConnection
  case mapping
  case underlying(context: Swift.String)
  case readyState
}
public protocol KZStateComponentDelegate : AnyObject {
  func changeViewState(_ state: KaizenSDK.KZStateComponentViewState, component: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseComponent : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var xibName: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var size: (height: CoreFoundation.CGFloat?, width: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) weak public var delegate: KaizenSDK.KZStateComponentDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutIfNeeded()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func removeFromSuperview()
  @_Concurrency.MainActor(unsafe) open func initializeView()
  @_Concurrency.MainActor(unsafe) open func configure(with kzMomentumModel: KaizenSDK.KZSharedProtocolModel)
  @objc deinit
}
extension KaizenSDK.BaseComponent : WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LineUpsViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzLineUpModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol StatisticsCarouselDataSource : AnyObject {
  func numberOfPagesInStatisticsCarousel() -> [KaizenSDK.StatisticsCarouselPage]
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StatisticsCarouselComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public var xibName: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) override public func initializeView()
  @_Concurrency.MainActor(unsafe) override public func configure(with kzModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func removeFromSuperview()
  @_Concurrency.MainActor(unsafe) weak public var dataSource: KaizenSDK.StatisticsCarouselDataSource?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension KaizenSDK.StatisticsCarouselComponent : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension KaizenSDK.StatisticsCarouselComponent : KaizenSDK.KZStateComponentDelegate {
  @_Concurrency.MainActor(unsafe) public func changeViewState(_ state: KaizenSDK.KZStateComponentViewState, component: Swift.String)
}
public struct LineUpsUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SummaryViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzSummaryModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
final public class Observable<Value> {
  final public var value: Value {
    get
    set
  }
  public init(_ value: Value)
  final public func observe(on observer: Swift.AnyObject, observerBlock: @escaping (Value) -> Swift.Void)
  final public func remove(observer: Swift.AnyObject)
  @objc deinit
}
public struct KZStyleMatchDetailModel : KaizenSDK.KZSharedProtocolModel {
  public let lang: KaizenSDK.LanguageKey
  public let identifier: Swift.String
  public let progressIndicatorColor: [UIKit.UIColor]
  public let accessToken: Swift.String?
  public let refreshToken: Swift.String?
  public init(identifier: Swift.String, lang: KaizenSDK.LanguageKey = .english, highlightFont: UIKit.UIFont? = UIFont(name: "Roboto-Bold",
                                                size: 12.0), unHighlightFont: UIKit.UIFont? = UIFont(name: "Roboto-Regular",
                                                  size: 12.0), progressIndicatorColor: [UIKit.UIColor] = kzSDKDefaultProgressIndicatorColor, accessToken: Swift.String? = nil, refreshToken: Swift.String? = nil)
}
public protocol MatchDetailRoutingLogic : AnyObject {
  func start()
  func dismiss()
  var matchDetailStyle: KaizenSDK.KZStyleMatchDetailModel { get set }
}
public struct MatchDetailViewBuilder {
  public static func inject(with navigationController: UIKit.UINavigationController?, matchDetailStyle: KaizenSDK.KZStyleMatchDetailModel) -> KaizenSDK.MatchDetailRoutingLogic
}
@_inheritsConvenienceInitializers public class ScrollingDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
public enum StatisticsCarouselPage : Swift.CaseIterable {
  case momentum
  case pitch
  case stats
  public static func == (a: KaizenSDK.StatisticsCarouselPage, b: KaizenSDK.StatisticsCarouselPage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [KaizenSDK.StatisticsCarouselPage]
  public static var allCases: [KaizenSDK.StatisticsCarouselPage] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CustomState {
  var lang: KaizenSDK.LanguageKey { get }
  var image: UIKit.UIImage? { get }
  var title: Swift.String? { get }
  var description: Swift.String? { get }
  var titleButton: Swift.String? { get }
}
public struct SummaryUseCaseBuilder {
}
public struct StatsUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class AdvancedPageControlView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var numberOfPages: Swift.Int {
    get
    set(val)
  }
  @_Concurrency.MainActor(unsafe) public var drawer: KaizenSDK.AdvancedPageControlDraw
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setPageOffset(_ offset: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func setPage(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StatsViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzStatsModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MomentumViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzMomentumModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PitchViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzPitchModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum NVActivityIndicatorType : Swift.CaseIterable {
  case blank
  case ballPulse
  case ballGridPulse
  case ballClipRotate
  case squareSpin
  case ballClipRotatePulse
  case ballClipRotateMultiple
  case ballPulseRise
  case ballRotate
  case cubeTransition
  case ballZigZag
  case ballZigZagDeflect
  case ballTrianglePath
  case ballScale
  case lineScale
  case lineScaleParty
  case ballScaleMultiple
  case ballPulseSync
  case ballBeat
  case ballDoubleBounce
  case lineScalePulseOut
  case lineScalePulseOutRapid
  case ballScaleRipple
  case ballScaleRippleMultiple
  case ballSpinFadeLoader
  case lineSpinFadeLoader
  case triangleSkewSpin
  case pacman
  case ballGridBeat
  case semiCircleSpin
  case ballRotateChase
  case orbit
  case audioEqualizer
  case circleStrokeSpin
  public static func == (a: KaizenSDK.NVActivityIndicatorType, b: KaizenSDK.NVActivityIndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [KaizenSDK.NVActivityIndicatorType]
  public static var allCases: [KaizenSDK.NVActivityIndicatorType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public typealias FadeInAnimation = (UIKit.UIView) -> Swift.Void
public typealias FadeOutAnimation = (UIKit.UIView, @escaping () -> Swift.Void) -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) final public class NVActivityIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TYPE: KaizenSDK.NVActivityIndicatorType
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TEXT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_PADDING: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_SIZE: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_SPACING: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_FONT: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_BACKGROUND_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_IN_ANIMATION: (_ view: UIKit.UIView) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_OUT_ANIMATION: (_ view: UIKit.UIView, _ complete: @escaping () -> Swift.Void) -> Swift.Void
  @_Concurrency.MainActor(unsafe) final public var type: KaizenSDK.NVActivityIndicatorType
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var color: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var padding: CoreFoundation.CGFloat
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) final public var animating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, type: KaizenSDK.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public func startAnimating()
  @_Concurrency.MainActor(unsafe) final public func stopAnimating()
  @objc deinit
}
public typealias ConstraintInsets = (left: CoreFoundation.CGFloat?, top: CoreFoundation.CGFloat?, right: CoreFoundation.CGFloat?, bottom: CoreFoundation.CGFloat?)
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func addChildView(childView: UIKit.UIView, withConstraints insets: KaizenSDK.ConstraintInsets)
}
@_inheritsConvenienceInitializers public class ThinWormHeadsDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
@_inheritsConvenienceInitializers public class JumpDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
public struct MomentumUseCaseBuilder {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class TabPageViewController : UIKit.UIPageViewController {
  @_Concurrency.MainActor(unsafe) open var isInfinity: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var tabItems: [(viewController: UIKit.UIViewController, title: Swift.String)] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static func create() -> KaizenSDK.TabPageViewController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension KaizenSDK.TabPageViewController {
  @_Concurrency.MainActor(unsafe) public func displayControllerWithIndex(_ index: Swift.Int, direction: UIKit.UIPageViewController.NavigationDirection, animated: Swift.Bool)
}
extension KaizenSDK.TabPageViewController {
  @_Concurrency.MainActor(unsafe) public func updateNavigationBarHidden(_ hidden: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func showNavigationBar()
}
@_inheritsConvenienceInitializers public class SlideDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
public protocol AdvancedPageControlDraw {
  var currentItem: CoreFoundation.CGFloat { get set }
  var size: CoreFoundation.CGFloat { get set }
  var numberOfPages: Swift.Int { get set }
  func draw(_ rect: CoreFoundation.CGRect)
}
public class AdvancedPageControlDrawerParentWithIndicator : KaizenSDK.AdvancedPageControlDrawerParent {
  public init(numberOfPages: Swift.Int? = 5, height: CoreFoundation.CGFloat? = 16, width: CoreFoundation.CGFloat? = 16, space: CoreFoundation.CGFloat? = 16, raduis: CoreFoundation.CGFloat? = 8, currentItem: CoreFoundation.CGFloat? = 0, indicatorColor: UIKit.UIColor? = .white, dotsColor: UIKit.UIColor? = UIColor.lightGray, isBordered: Swift.Bool = false, borderColor: UIKit.UIColor = .white, borderWidth: CoreFoundation.CGFloat = 1, indicatorBorderColor: UIKit.UIColor = .white, indicatorBorderWidth: CoreFoundation.CGFloat = 2)
  @objc deinit
}
public class AdvancedPageControlDrawerParent {
  public var numberOfPages: Swift.Int
  public var size: CoreFoundation.CGFloat
  public var currentItem: CoreFoundation.CGFloat
  public var items: [Swift.Int]
  public init(numberOfPages: Swift.Int? = 5, height: CoreFoundation.CGFloat? = 16, width: CoreFoundation.CGFloat? = 16, space: CoreFoundation.CGFloat? = 16, raduis: CoreFoundation.CGFloat? = 16, currentItem: CoreFoundation.CGFloat? = 0, dotsColor: UIKit.UIColor? = UIColor.lightGray, isBordered: Swift.Bool = false, borderColor: UIKit.UIColor = .white, borderWidth: CoreFoundation.CGFloat = 1)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class StandingsViewComponent : KaizenSDK.BaseComponent {
  @_Concurrency.MainActor(unsafe) override public func configure(with kzStandingModel: KaizenSDK.KZSharedProtocolModel)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol KZSharedProtocolModel {
  var identifier: Swift.String { get }
  var lang: KaizenSDK.LanguageKey { get }
  var progressIndicatorColor: [UIKit.UIColor] { get }
  var accessToken: Swift.String? { get }
  var refreshToken: Swift.String? { get }
}
public let kzSDKDefaultProgressIndicatorColor: [UIKit.UIColor]
public struct KZViewModel : KaizenSDK.KZSharedProtocolModel {
  public let identifier: Swift.String
  public let lang: KaizenSDK.LanguageKey
  public let progressIndicatorColor: [UIKit.UIColor]
  public let accessToken: Swift.String?
  public let refreshToken: Swift.String?
  public init(identifier: Swift.String, lang: KaizenSDK.LanguageKey = .english, progressIndicatorColor: [UIKit.UIColor] = kzSDKDefaultProgressIndicatorColor, accessToken: Swift.String? = nil, refreshToken: Swift.String? = nil)
}
public enum LanguageKey : Swift.String {
  case english
  case greek
  case german
  case portuguese
  case brazilian
  case bulgarian
  case romanian
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class SwapDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ThinWormDrawer : KaizenSDK.AdvancedPageControlDrawerParentWithIndicator, KaizenSDK.AdvancedPageControlDraw {
  public func draw(_ rect: CoreFoundation.CGRect)
  override public init(numberOfPages: Swift.Int? = super, height: CoreFoundation.CGFloat? = super, width: CoreFoundation.CGFloat? = super, space: CoreFoundation.CGFloat? = super, raduis: CoreFoundation.CGFloat? = super, currentItem: CoreFoundation.CGFloat? = super, indicatorColor: UIKit.UIColor? = super, dotsColor: UIKit.UIColor? = super, isBordered: Swift.Bool = super, borderColor: UIKit.UIColor = super, borderWidth: CoreFoundation.CGFloat = super, indicatorBorderColor: UIKit.UIColor = super, indicatorBorderWidth: CoreFoundation.CGFloat = super)
  @objc deinit
}
extension KaizenSDK.UseCaseError : Swift.Equatable {}
extension KaizenSDK.UseCaseError : Swift.Hashable {}
extension KaizenSDK.StatisticsCarouselPage : Swift.Equatable {}
extension KaizenSDK.StatisticsCarouselPage : Swift.Hashable {}
extension KaizenSDK.NVActivityIndicatorType : Swift.Equatable {}
extension KaizenSDK.NVActivityIndicatorType : Swift.Hashable {}
extension KaizenSDK.LanguageKey : Swift.Equatable {}
extension KaizenSDK.LanguageKey : Swift.Hashable {}
extension KaizenSDK.LanguageKey : Swift.RawRepresentable {}
